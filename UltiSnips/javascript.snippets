snippet desc "describe"
describe('`!p snip.rv = fn.split(os.extsep)[0]`', () => {
	$0
});
endsnippet

snippet describe "describe verbose"
describe('${1:`!p snip.rv = fn.split(os.extsep)[0]`}', () => {
	$0
});
endsnippet

snippet it "it"
it('${1:It}', () => {
	$0
});
endsnippet

snippet bee "beforeEach"
beforeEach(() => {
	$0
});
endsnippet

snippet afe "afterEach"
afterEach(() => {
	$0
});
endsnippet

snippet before "before"
before(() => {
	$0
});
endsnippet

snippet after "after"
after(() => {
	$0
});
endsnippet


# expect

snippet ebe "expect(x).toBe(y)"
expect($1).toBe($2);
endsnippet

snippet eeq "expect(x).toEqual(y)"
expect($1).toEqual($2);
endsnippet

snippet ethre "expect(x).toThrowError(y)"
expect(() => $1).toThrowError($2);
endsnippet

snippet etruthy "expect(x).toBeTruthy(y)"
expect($1).toBeTruthy($2);
endsnippet

snippet efalsy "expect(x).toBeFalsy(y)"
expect($1).toBeFalsy($2);
endsnippet

# assert
snippet aeq "assert.equal"
assert.equal($1, $2);
endsnippet

snippet adeq "assert.deepEqual"
assert.deepEqual($1, $2);
endsnippet

snippet atrue "assert.isTrue"
assert.isTrue($1);
endsnippet

snippet afalse "assert.isFalse"
assert.isFalse($1);
endsnippet

snippet athr "assert.throws"
assert.throws(() => $1, $2);
endsnippet

snippet fiinput "Basic Input"
<label for="$1">
	$2
	<input type="${3:text}" id="$1" name="$1" value="$4" $5 />
</label>
endsnippet

snippet fionly "Input Only"
<input type="${1:hidden}" id="$2" name="$2" value="\${$3}" />
endsnippet

snippet fitextfield "Basic Textfield"
<label for="$1">
	$2
	<textarea id="$1" name="$1"></textarea>
</label>
endsnippet

snippet cnfacomponent "Conf Component Admin"

import {default as `!p snip.rv = "%sAdmin%s" % (t[1], t[2].capitalize())`} from "../components/$1/admin/$2/component";


endsnippet
